
#include "Server.h"

Server::Server()
{

}

Server::~Server()
{
}

// 수신 했을 때, 콘솔 출력 및 echo 데이터 만드는 함수
char* print(vector<char>* str)
{   
    // 포인트 위치
    int p = 0;
    // 버퍼 설정. +1은 \0를 넣기 위한 크기
    char out[BUFFERSIZE + 1];
    // return을 하기 위해서는 힙에 데이터를 선언 해야 한다.
    char* ret = new char[str->size() + 10];
    // 메모리 복사 "echo - "를 붙힌다.
    memcpy(ret, "echo - ", 7);
    // 콘솔 출력
    cout << "From Client message : ";
    // buffer사이지를 넘어서는 데이터일 경우 반복을 통해서 받는다.
    for (int n = 0; n < (str->size() / BUFFERSIZE) + 1; n++)
    {
        // 버퍼 사이즈 설정
        int size = str->size();
        // 수신 데이터가 버퍼 사이즈를 넘었을 경우.
        if (size > BUFFERSIZE) {
            if (str->size() < (n + 1) * BUFFERSIZE)
            {
                size = str->size() % BUFFERSIZE;
            }
            else
            {
                size = BUFFERSIZE;
            }
        }
        // echo 메시지와 콘솔 메시지를 작성한다.
        for (int i = 0; i < size; i++, p++)
        {
            out[i] = *(str->begin() + p);
            if (out[i] == '\0')
            {
                out[i] = ' ';
            }
            *(ret + p + 7) = out[i];
        }
        out[size] = '\0';
        // 콘솔 메시지 콘솔 출력.
        cout << out;
    }
    cout << endl;
    // 에코 메시지는 끝에 개행 + ">"를 넣는다.
    memcpy(ret + p + 7, "\n>\0", 3);
    return ret;
}

// 접속되는 client별 쓰레드
void client(SOCKET clientSock, SOCKADDR_IN clientAddr, vector<thread*>* clientlist)
{
    // 접속 정보를 콘솔에 출력한다.
    cout << "Client connected IP address = " << inet_ntoa(clientAddr.sin_addr) << ":" << ntohs(clientAddr.sin_port) << endl;
    // client로 메시지를 보낸다.
    const char* message = "Welcome server!\r\n>\0";
    send(clientSock, message, strlen(message) + 1, 0);
    // telent은 한글자씩 데이터가 오기 때문에 글자를 모을 buffer가 필요하다.
    vector<char> buffer;
    // 수신 데이터
    char x;
    while (1)
    {
        // 데이터를 받는다. 에러가 발생하면 멈춘다.
        if (recv(clientSock, &x, sizeof(char), 0) == SOCKET_ERROR)
        {
            // 에러 콘솔 출력
            cout << "error" << endl;
            break;
        }
        // 만약 buffer의 끝자리가 개행일 경우
        if (buffer.size() > 0 && *(buffer.end() - 1) == '\r' && x == '\n')
        {
            // 메시지가 exit일 경우는 수신대기를 멈춘다.
            if (*buffer.begin() == 'e' && *(buffer.begin() + 1) == 'x' && *(buffer.begin() + 2) == 'i' && *(buffer.begin() + 3) == 't') {
                break;
            }
            // 콘솔에 출력하고 에코 메시지를 받는다.
            const char* echo = print(&buffer);
            // client로 에코 메시지 보낸다.
            send(clientSock, echo, buffer.size() + 10, 0);
            // 에코 메시지를 힙(new을 사용한 선언)에 선언했기 때문에 메모리 해지한다.
            delete echo;
            // 버퍼를 비운다.
            buffer.clear();
            // 다음 메시지 수신 대기
            continue;
        }
        // 버퍼에 글자를 하나 넣는다.
        buffer.push_back(x);
    }
    // 수신 대기가 끝나면 client와 소켓 통신을 끊는다.
    closesocket(clientSock);
    // 접속 정보를 콘솔에 출력한다.
    cout << "Client disconnected IP address = " << inet_ntoa(clientAddr.sin_addr) << ":" << ntohs(clientAddr.sin_port) << endl;
    // threadlist에서 현재 쓰레드를 제거한다.
    for (auto ptr = clientlist->begin(); ptr < clientlist->end(); ptr++)
    {
        // thread 아이디가 같은 것을 찾아서
        if ((*ptr)->get_id() == this_thread::get_id())
        {
            // 리스트에서 뺀다.
            clientlist->erase(ptr);
            break;
        }
    }
    // thread 메모리 해지는 thread가 종료 됨으로 자동으로 처리된다.
}

int Server::Initialize()
{    
    // 소켓 실행.
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        return 0;
    }

    serverSock = socket(PF_INET, SOCK_STREAM, 0);

    // 구조체 초기화
    memset(&addr, 0, sizeof(addr));
    // 소켓은 Internet 타입
    addr.sin_family = AF_INET;
    // 서버이기 때문에 local 설정한다.
    // Any인 경우는 호스트를 127.0.0.1로 잡아도 되고 localhost로 잡아도 되고 양쪽 다 허용하게 할 수 있따. 그것이 INADDR_ANY이다.
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    // 서버 포트 설정...저는 9090으로 설정함.
    addr.sin_port = htons(PORT);


    // 설정된 소켓 정보를 소켓에 바인딩한다.
    if (bind(serverSock, (SOCKADDR*)&addr, sizeof(SOCKADDR_IN)) == SOCKET_ERROR)
    {
        // 에러 콘솔 출력
        cout << "error" << endl;
        return 1;
    }

    // 소켓을 대기 상태로 기다린다.
    if (listen(serverSock, SOMAXCONN) == SOCKET_ERROR)
    {
        // 에러 콘솔 출력
        cout << "error" << endl;
        return 0;
    }

    return 1;
}
